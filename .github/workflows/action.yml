

inputs:

  # ====================================================================================
  # 🗃️ Base content
  
  # Base content
  base:
    description: Metrics base content
    default: header, activity, community, repositories, metadata
  
  # Number of repositories to use to computes metrics
  # Using more will result in more accurate metrics, but you may hit GitHub rate-limit more easily if you use a lot of plugins
  repositories:
    description: Number of repositories to use
    default: 100
  
  # Include forked repositories into metrics
  repositories_forks:
    description: Include forks in metrics
    default: no
  
  # Filter repositories by user affiliations
  # Note that it may affect some plugin outputs (broad affiliations will result in less representative metrics)
  repositories_affiliations:
    description: Repositories affiliations
    default: owner
  
  # ====================================================================================
  # 🧱 Core
  
  # User account personal token
  # No additional scopes are needed unless you want to include private repositories metrics
  # Some plugins may also require additional scopes
  # ────────────────────────────────────────────────────────────────
  # If you're only using plugins which don't really require a GitHub token, you may pass "NOT_NEEDED" as value
  token:
    description: ${{ secrets.METRICS_TOKEN }}
    required: true
  
  # GitHub username
  # Defaults to "token" owner
  user:
    description: hugocastrobr
    default: "hugocastrobr"
  
  # GitHub repository
  # Compute metrics for a repository instead ("user" being the repository owner)
  # Check https://github.com/lowlighter/metrics/blob/master/source/templates/repository/README.md for more informations
  repo:
    description: GitHub repository
    default: ""
  
  # Set to "${{ github.token }}" or "${{ secrets.GITHUB_TOKEN }}"
  # GITHUB_TOKEN is a special auto-generated token restricted to current repository, which is used to push files in it
  committer_token:
    description: ${{ secrets.METRICS_TOKEN }}
    default: ${{ github.token }}
  
  # Branch used to commit rendered metrics
  committer_branch:
    description: master
    default: "master"
  
  # Commit message
  # Use "${filename}" to display filename
  committer_message:
    description: Commit message
    default: Update ${filename} - [Skip GitHub Action]
  
  # Rendered metrics output path, relative to repository's root
  filename:
    description: Rendered metrics output path
    default: github-metrics.svg
  
  # Output action
  output_action:
    description: Output action
    default: commit
  
  # Optimize SVG image to reduce its filesize
  # Some templates may not support this option
  optimize:
    description: SVG optimization
    default: yes
  
  # Setup additional templates from remote repositories
  setup_community_templates:
    description: Additional community templates to setup
    default: ""
  
  # Template to use
  # To use community template, prefix its name with "@"
  template:
    description: Template to use
    default: classic
  
  # Additional query parameters (JSON string)
  # Some templates may require additional parameters which you can specify here
  # Do not use this option to pass plugins parameters as they'll be overwritten by the other options
  query:
    description: Additional query parameters
    default: "{}"
  
  # Timezone used by metrics
  # See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  config_timezone:
    description: 	Brazil/East
    default: ""
  
  # Specify in which order metrics content will be displayed
  # If you omit some partials, they'll be appended at the end in default order
  # See "partials/_.json" of each template for a list of supported partials
  config_order:
    description: Configure content order
    default: ""
  
  # Use twemojis instead of emojis
  # May increase filesize but emojis will be rendered the same across all platforms
  config_twemoji:
    description: Use twemojis instead of emojis
    default: no
  
  # Render GitHub custom emojis (like ":octocat:", see full list at https://api.github.com/emojis)
  # May increase filesize
  config_gemoji:
    description: Use GitHub custom emojis
    default: yes
  
  # Enable SVG CSS animations
  config_animations:
    description: SVG CSS animations
    default: yes
  
  # Configure padding for output image (percentage value)
  # It can be used to add padding to generated metrics if rendering is cropped or has too much empty space
  # Specify one value (for both width and height) or two values (one for width and one for height)
  config_padding:
    description: Image padding
    default: 6%, 13%
  
  # Metrics output format
  config_output:
    description: Output image format
    default: svg
  
  # Number of retries in case rendering fail
  retries:
    description: Number of retries
    default: 5
  
  # Time to wait (in seconds) before each retry
  retries_delay:
    description: Time to wait (in seconds) before each retry
    default: 100
  
  # Throw on plugins errors
  # If disabled, metrics will handle errors gracefully with a message in rendered metrics
  plugins_errors_fatal:
    description: Die on plugins errors
    default: no
  
  # Debug mode
  # Note that this will automatically be enabled if job fails
  debug:
    description: Debug logs
    default: no
  
  # Ensure SVG can be correctly parsed after generation
  verify:
    description: Verify SVG
    default: no
  
  # Debug flags
  debug_flags:
    description: Debug flags
    default: ""
  
  # Dry-run mode (perform generation without output)
  # Unlike "output_action" set to "none", output file won't be available in "/metrics_renders"
  dryrun:
    description: Enable dry-run
    default: no
  
  # Experimental features
  experimental_features:
    description: Experimental features
    default: ""
  
  # Use mocked data to bypass external APIs
  use_mocked_data:
    description: Use mocked data instead of live APIs
    default: no
  
  # Use a pre-built image from GitHub registry when using unreleased versions of "lowlighter/metrics"
  # This option has no effect on forks (images will always be rebuilt from Dockerfile)
  # See https://github.com/users/lowlighter/packages/container/package/metrics for more information
  use_prebuilt_image:
    description: Use pre-built image from GitHub registry
    default: yes
  
  # ====================================================================================
  # 📅 Isometric commit calendar
  
  # Enable or disable plugin
  plugin_isocalendar:
    description: Display an isometric view of your commits calendar
    default: yes
  
  # Set time window shown by isometric calendar
  plugin_isocalendar_duration:
    description: Set time window shown by isometric calendar
    default: half-year
  
  # ====================================================================================
  # 🈷️ Most used languages
  
  # Enable or disable plugin
  plugin_languages:
    description: Display most used languages metrics
    default: yes
  
  # List of languages that will be ignored
  plugin_languages_ignored:
    description: Languages to ignore
    default: ""
  
  # List of repositories that will be skipped
  plugin_languages_skipped:
    description: Repositories to skip
    default: ""
  
  # Overrides default languages colors
  # Use `${n}:${color}` to change the color of the n-th most used language (e.g. "0:red" to make your most used language red)
  # Use `${language}:${color}` to change the color of named language (e.g. "javascript:red" to make JavaScript language red, language case is ignored)
  # Use a value from `colorsets.json` to use a predefined set of colors
  # Both hexadecimal and named colors are supported
  plugin_languages_colors:
    description: Custom languages colors
    default: github
  
  # Languages additional details
  plugin_languages_details:
    description: Additional details
    default: ""
  
  # Minimum threshold (in percentage) to reach for languages to be displayed
  plugin_languages_threshold:
    description: Minimum threshold
    default: 0%
  
  # ====================================================================================
  # 💡 Coding habits
  
  # Enable or disable plugin
  plugin_habits:
    description: Display coding habits metrics
    default: yes
  
  # Number of events to use to computes habits
  # Using more will result in more accurate metrics, but you may hit GitHub rate-limit more easily
  plugin_habits_from:
    description: Number of events to use
    default: 200
  
  # Filter used events to compute habits by age
  plugin_habits_days:
    description: Maximum event age
    default: 14
  
  # Display tidbits about your most active hours/days, indents used (spaces/tabs), etc.
  # This is deduced from your recent activity
  plugin_habits_facts:
    description: Display coding habits collected facts based on recent activity
    default: yes
  
  # Display charts of most active time of the day and most active day of the week
  # Also display languages recently used (this is not the same as plugin_languages, as the latter is an all-time stats)
  plugin_habits_charts:
    description: Display coding habits charts based on recent activity
    default: no
  
  # ====================================================================================
  # 👨‍💻 Lines of code changed
  
  # Enable or disable plugin
  plugin_lines:
    description: Display lines of code metrics
    default: yes
  
  
  # ====================================================================================
  # 🗂️ Active projects
  
  # Enable or disable plugin
  plugin_projects:
    description: Display active projects
    default: yes
  
  # Number of projects to display
  # Set to 0 to only display "plugin_projects_repositories" projects
  # Projects listed in "plugin_projects_repositories" are not affected by this option
  plugin_projects_limit:
    description: Maximum number of projects to display
    default: 4
  
  # List of repository projects to display, using the following format:
  # :user/:repo/projects/:project_id
  plugin_projects_repositories:
    description: List of repository project identifiers to disaplay
    default: ""
  
  # Display projects descriptions
  plugin_projects_descriptions:
    description: Display projects descriptions
    default: no
  
  # ====================================================================================
  # 📰 Recent activity
  
  # Enable or disable plugin
  plugin_activity:
    description: Display recent activity
    default: yes
  
  # Number of activity events to display
  plugin_activity_limit:
    description: Maximum number of events to display
    default: 5
  
  # Filter events by age
  # Set to 0 to disable age filtering
  plugin_activity_days:
    description: Maximum event age
    default: 14
  
  # Filter events by type
  plugin_activity_filter:
    description: Events types to keep
    default: all
  
  # Set events visibility (use this to restrict events when using a "repo" token)
  plugin_activity_visibility:
    description: Set events visibility
    default: all
  
  # Display events timestamps
  plugin_activity_timestamps:
    description: Display events timestamps
    default: no
  
  
  # ====================================================================================
  # 🌇 GitHub Skyline 3D calendar
  
  # Enable or disable plugin
  plugin_skyline:
    description: Display GitHub Skyline 3D calendar
    default: yes
  
  # Displayed year
  plugin_skyline_year:
    description: Displayed year
    default: current-year
  
  # Number of frames
  # Use 120 for a full-loop and 60 for a half-loop
  plugin_skyline_frames:
    description: Number of frames
    default: 60
  
  # Image quality
  # Note that it significantly increases output filesize (up to a few Mb) which can cause render/loading issues
  plugin_skyline_quality:
    description: Image quality
    default: 0.5
  
 
  # ====================================================================================
  # ✒️ Recent posts
  
  # Enable or disable plugin
  plugin_posts:
    description: Display recent posts
    default: no
  
  # Posts external source
  plugin_posts_source:
    description: Posts external source
    default: ""
  
  # Display a few lines about each posts
  plugin_posts_descriptions:
    description: Display posts descriptions
    default: no
  
  # Display posts cover images
  plugin_posts_covers:
    description: Display posts cover images
    default: no
  
  # Number of posts to display
  plugin_posts_limit:
    description: Maximum number of posts to display
    default: 4
  
  # Username on external posts source
  plugin_posts_user:
    description: Posts external source username
    default: .user.login
  
# ====================================================================================
# Action metadata
name: GitHub metrics as SVG image
author: lowlighter
description: An SVG generator with 20+ metrics about your GitHub account! Additional plugins are available to display even more!
branding:
  icon: user-check
  color: gray-dark

# The action will parse its name to check if it's the official action or if it's a forked one
# On the official action, it'll use the docker image published on GitHub registry when using a released version, allowing faster runs
# On a forked action, it'll rebuild the docker image from Dockerfile to take into account changes you made
runs:
  using: composite
  steps:
    - run: |
        # Create environment file from inputs and GitHub variables
        echo "::group::Metrics docker image setup"
        cd $METRICS_ACTION_PATH
        touch .env
        for INPUT in $(echo $INPUTS | jq -r 'to_entries|map("INPUT_\(.key|ascii_upcase)=\(.value|@uri)")|.[]'); do
          echo $INPUT >> .env
        done
        env | grep -E '^(GITHUB|ACTIONS|CI)' >> .env
        echo "Environment variables: loaded"
        # Renders output folder
        METRICS_RENDERS="/metrics_renders"
        sudo mkdir -p $METRICS_RENDERS
        echo "Renders output folder: $METRICS_RENDERS"
        # Source repository (picked from action name)
        METRICS_SOURCE=$(echo $METRICS_ACTION | sed -E 's/metrics.*?$//g')
        echo "Source: $METRICS_SOURCE"
        # Version (picked from package.json)
        METRICS_VERSION=$(grep -Po '(?<="version": ").*(?=")' package.json)
        echo "Version: $METRICS_VERSION"
        # Image tag (extracted from version or from env)
        METRICS_TAG=v$(echo $METRICS_VERSION | sed -r 's/^([0-9]+[.][0-9]+).*/\1/')
        echo "Image tag: $METRICS_TAG"
        # Image name
        # Official action
        if [[ $METRICS_SOURCE == "lowlighter" ]]; then
          # Use registry with pre-built images
          if [[ ! $METRICS_USE_PREBUILT_IMAGE =~ ^([Ff]alse|[Oo]ff|[Nn]o|0)$ ]]; then
            # Is released version
            set +e
            METRICS_IS_RELEASED=$(expr $(expr match $METRICS_VERSION .*-beta) == 0)
            set -e
            echo "Is released version: $METRICS_IS_RELEASED"
            if [[ "$METRICS_IS_RELEASED" -eq "0" ]]; then
              METRICS_TAG="$METRICS_TAG-beta"
              echo "Image tag (updated): $METRICS_TAG"
            fi
            METRICS_IMAGE=ghcr.io/lowlighter/metrics:$METRICS_TAG
            echo "Using pre-built version $METRICS_TAG, will pull docker image from GitHub registry"
            docker image pull $METRICS_IMAGE
          # Rebuild image
          else
            echo "Using an unreleased version ($METRICS_VERSION)"
            METRICS_IMAGE=metrics:$METRICS_VERSION
          fi
        # Forked action
        else
          echo "Using a forked version"
          METRICS_IMAGE=metrics:forked-$METRICS_VERSION
        fi
        echo "Image name: $METRICS_IMAGE"
        # Build image if necessary
        set +e
        docker image inspect $METRICS_IMAGE
        METRICS_IMAGE_NEEDS_BUILD="$?"
        set -e
        if [[ "$METRICS_IMAGE_NEEDS_BUILD" -gt "0" ]]; then
          echo "Image $METRICS_IMAGE is not present locally, rebuilding it from Dockerfile"
          docker build -t $METRICS_IMAGE .
        else
          echo "Image $METRICS_IMAGE is present locally"
        fi
        echo "::endgroup::"
        # Run docker image with current environment
        docker run --init --volume $GITHUB_EVENT_PATH:$GITHUB_EVENT_PATH --volume $METRICS_RENDERS:/renders --env-file .env $METRICS_IMAGE
        rm .env
      shell: bash
      env:
        METRICS_ACTION: ${{ github.action }}
        METRICS_ACTION_PATH: ${{ github.action_path }}
        METRICS_USE_PREBUILT_IMAGE: ${{ inputs.use_prebuilt_image }}
        INPUTS: ${{ toJson(inputs) }}
